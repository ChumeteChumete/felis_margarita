package bot

import (
	"context"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"sync"
	"time"

	pb "Felis_Margarita/pkg"
	tgbot "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"golang.org/x/sync/semaphore"
)

// userProcessing —Ö—Ä–∞–Ω–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ (—Ç–æ–ª—å–∫–æ offline)
var (
	userProcessing = make(map[string]bool)
	procMu         sync.RWMutex
)

func isUserProcessing(userID string) bool {
	procMu.RLock()
	defer procMu.RUnlock()
	return userProcessing[userID]
}

func setUserProcessing(userID string, processing bool) {
	procMu.Lock()
	defer procMu.Unlock()
	if processing {
		userProcessing[userID] = true
	} else {
		delete(userProcessing, userID)
	}
}

// UserMode —Ö—Ä–∞–Ω–∏—Ç —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserMode string

const (
	ModeOffline UserMode = "offline"
	ModeOnline  UserMode = "online"
)

// userModes ‚Äî –≤—Ä–µ–º–µ–Ω–Ω—ã–π in-memory storage (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis –ø–æ–∑–∂–µ)
var (
	userModes = make(map[string]UserMode)
	mu        sync.RWMutex
)

func getUserMode(userID string) UserMode {
	mu.RLock()
	defer mu.RUnlock()
	if mode, ok := userModes[userID]; ok {
		return mode
	}
	return ModeOffline // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

func setUserMode(userID string, mode UserMode) {
	mu.Lock()
	defer mu.Unlock()
	userModes[userID] = mode
}

type Handler struct {
	bot     *tgbot.BotAPI
	service *Service
	sem     *semaphore.Weighted
}

func NewHandler(token string, service *Service) *Handler {
	bot, err := tgbot.NewBotAPI(token)
	if err != nil {
		log.Fatalf("telegram init failed: %v", err)
	}
	return &Handler{
		bot:     bot,
		service: service,
		sem:     semaphore.NewWeighted(5),
	}
}

func (h *Handler) Start(ctx context.Context) error {
	log.Println("Starting bot...")
	u := tgbot.NewUpdate(0)
	u.Timeout = 60
	updates := h.bot.GetUpdatesChan(u)

	for {
		select {
		case <-ctx.Done():
			log.Println("Stopping bot...")
			h.bot.StopReceivingUpdates()
			return nil
		case update := <-updates:
			if update.Message == nil {
				log.Println("Received empty message update")
				continue
			}
			go func() {
				defer func() {
					if r := recover(); r != nil {
						log.Printf("Panic in handleUpdate: %v", r)
					}
				}()
				h.handleUpdate(ctx, update)
			}()
		}
	}
}

func (h *Handler) handleUpdate(ctx context.Context, update tgbot.Update) {
	userID := strconv.FormatInt(update.Message.From.ID, 10)
	chatID := update.Message.Chat.ID

	if update.Message.Document != nil {
		h.handleDocument(ctx, userID, chatID, update.Message.Document)
		return
	}

	if update.Message.Text != "" {
		text := update.Message.Text

		switch text {
		case "/start":
			h.handleStart(chatID)
			return
		case "/help":
			h.handleHelp(chatID)
			return
		case "/online":
			h.handleSetMode(ctx, userID, chatID, "online")
			return
		case "/offline":
			h.handleSetMode(ctx, userID, chatID, "offline")
			return
		case "/docs":
			h.handleListDocs(ctx, userID, chatID)
			return
		case "/clear":
			h.handleClearDocs(ctx, userID, chatID)
			return
		}

		mode := getUserMode(userID)
		if mode == ModeOnline {
			h.handleDirectQuestion(ctx, chatID, text)
		} else {
			h.handleQuestion(ctx, userID, chatID, text, false)
		}
	}
}

func (h *Handler) handleSetMode(ctx context.Context, userID string, chatID int64, mode string) {
	req := &pb.SetModeRequest{Mode: mode}
	_, err := h.service.mlClient.SetMode(ctx, req)
	if err != nil {
		h.bot.Send(tgbot.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º"))
		return
	}

	if mode == "online" {
		setUserMode(userID, ModeOnline)
		msg := "‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ –æ–Ω–ª–∞–π–Ω\n\n" +
			"–¢–µ–ø–µ—Ä—å —è —Å–≤–æ–±–æ–¥–µ–Ω, –∫–∞–∫ –≤–µ—Ç–µ—Ä –≤ –ø—É—Å—Ç—ã–Ω–µ! " +
			"–¢–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî —è –Ω–µ –≤–∏–∂—É –∏—Ö –∏ –Ω–µ –ø–æ–º–Ω—é. " +
			"–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –æ—Ç–≤–µ—á—É –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –±–∞—Ä—Ö–∞–Ω–Ω—ã–π –∫–æ—Ç üêæ"
		h.bot.Send(tgbot.NewMessage(chatID, msg))
	} else {
		setUserMode(userID, ModeOffline)
		msg := "‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ –æ—Ñ—Ñ–ª–∞–π–Ω\n\n" +
			"–¢–µ–ø–µ—Ä—å —è –≤–∏–∂—É —Ç–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ—Ç–≤–µ—á–∞—é —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–∏–º. " +
			"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è —Å–æ –º–Ω–æ–π ‚Äî –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω! üèúÔ∏è"
		h.bot.Send(tgbot.NewMessage(chatID, msg))
	}
}

func (h *Handler) handleDocument(ctx context.Context, userID string, chatID int64, doc *tgbot.Document) {
	file, err := h.bot.GetFile(tgbot.FileConfig{FileID: doc.FileID})
	if err != nil {
		h.sendError(chatID, "failed to get file")
		return
	}

	data, err := h.downloadFile(file.Link(h.bot.Token))
	if err != nil {
		h.sendError(chatID, "failed to download file")
		return
	}

	docID, err := h.service.UploadDocument(ctx, userID, doc.FileName, data)
	if err != nil {
		h.sendError(chatID, "upload failed")
		return
	}

	h.bot.Send(tgbot.NewMessage(chatID, fmt.Sprintf("Document uploaded: %s", docID)))
}

func (h *Handler) handleQuestion(ctx context.Context, userID string, chatID int64, question string, showContexts bool) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏ —É–∂–µ
	if isUserProcessing(userID) {
		h.bot.Send(tgbot.NewMessage(chatID, "üêæ –ü–æ–¥–æ–∂–¥–∏, —è –µ—â—ë –∏—â—É –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å..."))
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
	setUserProcessing(userID, true)
	defer setUserProcessing(userID, false)

	log.Printf("Processing question (offline mode) from user %s: %s", userID, question)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." ‚Äî –∞–Ω–∏–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	typingMsg := tgbot.NewMessage(chatID, "üêæ –§–µ–ª–∏—Å —É—Å–ª—ã—à–∞–ª —Ç–µ–±—è. –ò—â—É –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–≤–æ–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö...")
	sentMsg, err := h.bot.Send(typingMsg)
	if err != nil {
		log.Printf("Failed to send typing indicator: %v", err)
	}

	// –¢–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç
	ctx, cancel := context.WithTimeout(ctx, 5*time.Minute)
	defer cancel()

	resp, err := h.service.Query(ctx, userID, question, 2)
	if err != nil {
		log.Printf("Query error for user %s: %v", userID, err)
		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—à–∏–±–∫—É
		if sentMsg.MessageID != 0 {
			editMsg := tgbot.NewEditMessageText(chatID, sentMsg.MessageID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
			h.bot.Send(editMsg)
		} else {
			h.sendError(chatID, "query failed")
		}
		return
	}

	msg := h.formatResponse(resp, showContexts)
	if len(msg) > 4000 {
		msg = msg[:4000]
	}

	if sentMsg.MessageID != 0 {
		editMsg := tgbot.NewEditMessageText(chatID, sentMsg.MessageID, msg)
		editMsg.ParseMode = "HTML"
		h.bot.Send(editMsg)
	} else {
		tmsg := tgbot.NewMessage(chatID, msg)
		tmsg.ParseMode = "HTML"
		h.bot.Send(tmsg)
	}
}

func (h *Handler) handleDirectQuestion(ctx context.Context, chatID int64, question string) {
	log.Printf("Direct question (online mode): %s", question)

	ctx, cancel := context.WithTimeout(ctx, 30*time.Second)
	defer cancel()

	req := &pb.QueryRequest{
		UserId:   "direct",
		Question: question,
		TopK:     0,
	}

	resp, err := h.service.mlClient.DirectQuery(ctx, req)
	if err != nil {
		log.Printf("Direct query error: %v", err)
		h.sendError(chatID, "query failed")
		return
	}

	if resp.Answer != "" {
		h.bot.Send(tgbot.NewMessage(chatID, resp.Answer))
	} else {
		h.bot.Send(tgbot.NewMessage(chatID, "–ù–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å"))
	}
}

func (h *Handler) formatResponse(resp *QueryResponse, showContexts bool) string {
	msg := ""

	if resp.Answer != "" {
		msg += resp.Answer + "\n"
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
	if showContexts && len(resp.Contexts) > 0 {
		msg += "\n<b>üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
		for i, c := range resp.Contexts {
			text := c.Text
			if len(text) > 300 {
				text = text[:300] + "..."
			}
			msg += fmt.Sprintf("%d. %s\n\n", i+1, text)
		}
	}

	return msg
}

func (h *Handler) handleStart(chatID int64) {
	msg := `üê± –ü—Ä–∏–≤–µ—Ç! –Ø –§–µ–ª–∏—Å Margarita ‚Äî –±–∞—Ä—Ö–∞–Ω–Ω—ã–π –∫–æ—Ç –≤ –ø—É—Å—Ç—ã–Ω–µ –¥–∞–Ω–Ω—ã—Ö.

	–Ø —Ä–∞–±–æ—Ç–∞—é –≤ –¥–≤—É—Ö —Ä–µ–∂–∏–º–∞—Ö:
	üìÑ **–° –¥–æ–∫—É–º–µ–Ω—Ç–æ–º** ‚Äî –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª –∏ —Å–ø—Ä–æ—Å–∏ –æ –Ω—ë–º
	üí¨ **–ë–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞** ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π

	–ö–æ–º–∞–Ω–¥—ã:
	/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
	/docs ‚Äî —Ç–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
	/clear ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
	/contexts ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞)

	–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º! üèúÔ∏è`
		h.bot.Send(tgbot.NewMessage(chatID, msg))
	}

	func (h *Handler) handleHelp(chatID int64) {
		msg := `üìö **–ü–æ–º–æ—â—å:**

	1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, TXT, DOCX)
	2Ô∏è‚É£ –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ –Ω—ë–º
	3Ô∏è‚É£ –Ø –Ω–∞–π–¥—É –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

	–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!

	üîç /contexts ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞
	üóëÔ∏è /clear ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã`
		h.bot.Send(tgbot.NewMessage(chatID, msg))
}

func (h *Handler) handleListDocs(ctx context.Context, userID string, chatID int64) {
	req := &pb.ListDocsRequest{UserId: userID}
	resp, err := h.service.mlClient.ListDocuments(ctx, req)
	if err != nil {
		log.Printf("ListDocs error for user %s: %v", userID, err)
		h.bot.Send(tgbot.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"))
		return
	}

	if len(resp.Titles) == 0 {
		h.bot.Send(tgbot.NewMessage(chatID, "üìÇ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."))
		return
	}

	msg := "üìã –¢–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
	for i, title := range resp.Titles {
		msg += fmt.Sprintf("%d. %s\n", i+1, title)
	}
	h.bot.Send(tgbot.NewMessage(chatID, msg))
}

func (h *Handler) handleClearDocs(ctx context.Context, userID string, chatID int64) {
	req := &pb.ClearDocsRequest{UserId: userID}
	_, err := h.service.mlClient.ClearDocuments(ctx, req)
	if err != nil {
		log.Printf("ClearDocs error for user %s: %v", userID, err)
		h.bot.Send(tgbot.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"))
		return
	}

	h.bot.Send(tgbot.NewMessage(chatID, "üóëÔ∏è –í—Å–µ —Ç–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã. –ü—É—Å—Ç—ã–Ω—è —á–∏—Å—Ç–∞!"))
}

func (h *Handler) downloadFile(url string) ([]byte, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	return io.ReadAll(resp.Body)
}

func (h *Handler) sendError(chatID int64, errMsg string) {
	userMsg := "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n\n"
	
	switch errMsg {
	case "failed to get file":
		userMsg += "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
	case "failed to download file":
		userMsg += "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞."
	case "upload failed":
		userMsg += "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞."
	case "query failed":
		userMsg += "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
	default:
		userMsg += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
	}
	
	h.bot.Send(tgbot.NewMessage(chatID, userMsg))
}