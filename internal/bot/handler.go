package bot

import (
	"context"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"time"

	pb "Felis_Margarita/pkg/proto"
	tgbot "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"golang.org/x/sync/semaphore"
)

type Handler struct {
    bot     *tgbot.BotAPI
    service *Service
    sem     *semaphore.Weighted
}

func NewHandler(token string, service *Service) *Handler {
    bot, err := tgbot.NewBotAPI(token)
    if err != nil {
        log.Fatalf("telegram init failed: %v", err)
    }
    return &Handler{
        bot:     bot,
        service: service,
        sem:     semaphore.NewWeighted(5),
    }
}

func (h *Handler) Start(ctx context.Context) error {
    log.Println("Starting bot...")
    u := tgbot.NewUpdate(0)
    u.Timeout = 60
    updates := h.bot.GetUpdatesChan(u)

    for {
        select {
        case <-ctx.Done():
            log.Println("Stopping bot...")
            h.bot.StopReceivingUpdates()
            return nil
        case update := <-updates:
            if update.Message == nil {
                log.Println("Received empty message update")
                continue
            }
            go func() {
                defer func() {
                    if r := recover(); r != nil {
                        log.Printf("Panic in handleUpdate: %v", r)
                    }
                }()
                h.handleUpdate(ctx, update)
            }()
        }
    }
}

func (h *Handler) handleUpdate(ctx context.Context, update tgbot.Update) {
	userID := strconv.FormatInt(update.Message.From.ID, 10)
	chatID := update.Message.Chat.ID

	if update.Message.Document != nil {
		h.handleDocument(ctx, userID, chatID, update.Message.Document)
		return
	}

	if update.Message.Text != "" {
		text := update.Message.Text
		
		switch text {
		case "/start":
			h.handleStart(chatID)
			return
		case "/help":
			h.handleHelp(chatID)
			return
		case "/docs":
			h.handleListDocs(ctx, userID, chatID)
			return
		case "/clear":
			h.handleClearDocs(ctx, userID, chatID)
			return
		}
		
		// –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
		h.handleQuestion(ctx, userID, chatID, text, false)
	}
}   

func (h *Handler) handleDocument(ctx context.Context, userID string, chatID int64, doc *tgbot.Document) {
	file, err := h.bot.GetFile(tgbot.FileConfig{FileID: doc.FileID})
	if err != nil {
		h.sendError(chatID, "failed to get file")
		return
	}

	data, err := h.downloadFile(file.Link(h.bot.Token))
	if err != nil {
		h.sendError(chatID, "failed to download file")
		return
	}

	docID, err := h.service.UploadDocument(ctx, userID, doc.FileName, data)
	if err != nil {
		h.sendError(chatID, "upload failed")
		return
	}

	h.bot.Send(tgbot.NewMessage(chatID, fmt.Sprintf("Document uploaded: %s", docID)))
}

func (h *Handler) handleQuestion(ctx context.Context, userID string, chatID int64, question string, showContexts bool) {
    log.Printf("Processing question from user %s: %s", userID, question)
    ctx, cancel := context.WithTimeout(ctx, 60*time.Second) 
    defer cancel()
    resp, err := h.service.Query(ctx, userID, question, 10)
    if err != nil {
        log.Printf("Query error for user %s: %v", userID, err)
        h.sendError(chatID, "query failed")
        return
    }
    log.Printf("Got %d contexts from ML service for user %s", len(resp.Contexts), userID)
    msg := h.formatResponse(resp, showContexts)
    log.Printf("Formatted message length: %d chars", len(msg))
    if len(msg) > 4000 {
        log.Printf("WARNING: Message too long for user %s, truncating", userID)
        msg = msg[:4000]
    }
    tmsg := tgbot.NewMessage(chatID, msg)
    tmsg.ParseMode = "HTML"
    _, err = h.bot.Send(tmsg)
    if err != nil {
        log.Printf("Failed to send message to user %s: %v", userID, err)
        return
    }
}

func (h *Handler) handleDirectQuestion(ctx context.Context, chatID int64, question string) {
	log.Printf("Direct question (no search): %s", question)
	
	ctx, cancel := context.WithTimeout(ctx, 30*time.Second)
	defer cancel()
	
	// –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ ML —Å–µ—Ä–≤–∏—Å—É –ë–ï–ó –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
	req := &pb.QueryRequest{
		UserId:   "direct",
		Question: question,
		TopK:     0,
	}
	
	resp, err := h.service.mlClient.DirectQuery(ctx, req)
	if err != nil {
		log.Printf("Direct query error: %v", err)
		h.sendError(chatID, "query failed")
		return
	}
	
	if resp.Answer != "" {
		h.bot.Send(tgbot.NewMessage(chatID, resp.Answer))
	} else {
		h.bot.Send(tgbot.NewMessage(chatID, "–ù–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å"))
	}
}

func (h *Handler) formatResponse(resp *QueryResponse, showContexts bool) string {
	msg := ""

	if resp.Answer != "" {
		msg += resp.Answer + "\n"
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
	if showContexts && len(resp.Contexts) > 0 {
		msg += "\n<b>üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
		for i, c := range resp.Contexts {
			text := c.Text
			if len(text) > 300 {
				text = text[:300] + "..."
			}
			msg += fmt.Sprintf("%d. %s\n\n", i+1, text)
		}
	}

	return msg
}

func (h *Handler) handleStart(chatID int64) {
	msg := `üê± –ü—Ä–∏–≤–µ—Ç! –Ø –§–µ–ª–∏—Å Margarita ‚Äî –±–∞—Ä—Ö–∞–Ω–Ω—ã–π –∫–æ—Ç –≤ –ø—É—Å—Ç—ã–Ω–µ –¥–∞–Ω–Ω—ã—Ö.

	–Ø —Ä–∞–±–æ—Ç–∞—é –≤ –¥–≤—É—Ö —Ä–µ–∂–∏–º–∞—Ö:
	üìÑ **–° –¥–æ–∫—É–º–µ–Ω—Ç–æ–º** ‚Äî –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª –∏ —Å–ø—Ä–æ—Å–∏ –æ –Ω—ë–º
	üí¨ **–ë–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞** ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π

	–ö–æ–º–∞–Ω–¥—ã:
	/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
	/docs ‚Äî —Ç–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
	/clear ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
	/contexts ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞)

	–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º! üèúÔ∏è`
		h.bot.Send(tgbot.NewMessage(chatID, msg))
	}

	func (h *Handler) handleHelp(chatID int64) {
		msg := `üìö **–ü–æ–º–æ—â—å:**

	1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, TXT, DOCX)
	2Ô∏è‚É£ –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ –Ω—ë–º
	3Ô∏è‚É£ –Ø –Ω–∞–π–¥—É –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

	–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!

	üîç /contexts ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞
	üóëÔ∏è /clear ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã`
		h.bot.Send(tgbot.NewMessage(chatID, msg))
}

func (h *Handler) handleListDocs(ctx context.Context, userID string, chatID int64) {
	// TODO: –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
	msg := "üìã –¢–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Å–∫–æ—Ä–æ —Ä–µ–∞–ª–∏–∑—É–µ–º)"
	h.bot.Send(tgbot.NewMessage(chatID, msg))
}

func (h *Handler) handleClearDocs(ctx context.Context, userID string, chatID int64) {
	// TODO: —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	msg := "üóëÔ∏è –î–æ–∫—É–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã (—Å–∫–æ—Ä–æ —Ä–µ–∞–ª–∏–∑—É–µ–º)"
	h.bot.Send(tgbot.NewMessage(chatID, msg))
}

func (h *Handler) downloadFile(url string) ([]byte, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	return io.ReadAll(resp.Body)
}

func (h *Handler) sendError(chatID int64, errMsg string) {
	userMsg := "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n\n"
	
	switch errMsg {
	case "failed to get file":
		userMsg += "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
	case "failed to download file":
		userMsg += "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞."
	case "upload failed":
		userMsg += "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞."
	case "query failed":
		userMsg += "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
	default:
		userMsg += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
	}
	
	h.bot.Send(tgbot.NewMessage(chatID, userMsg))
}