// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.31.1
// source: proto/fm.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UploadDocRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	UserId string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title  string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Если клиент присылает plain text (вставил текст) — используем text.
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// Если присылает файл — use file_bytes (может быть chunked при необходимости).
	FileBytes     []byte `protobuf:"bytes,4,opt,name=file_bytes,json=fileBytes,proto3" json:"file_bytes,omitempty"`
	Filename      string `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadDocRequest) Reset() {
	*x = UploadDocRequest{}
	mi := &file_proto_fm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadDocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDocRequest) ProtoMessage() {}

func (x *UploadDocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDocRequest.ProtoReflect.Descriptor instead.
func (*UploadDocRequest) Descriptor() ([]byte, []int) {
	return file_proto_fm_proto_rawDescGZIP(), []int{0}
}

func (x *UploadDocRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UploadDocRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UploadDocRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *UploadDocRequest) GetFileBytes() []byte {
	if x != nil {
		return x.FileBytes
	}
	return nil
}

func (x *UploadDocRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type UploadDocResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DocId         string                 `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadDocResponse) Reset() {
	*x = UploadDocResponse{}
	mi := &file_proto_fm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadDocResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDocResponse) ProtoMessage() {}

func (x *UploadDocResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDocResponse.ProtoReflect.Descriptor instead.
func (*UploadDocResponse) Descriptor() ([]byte, []int) {
	return file_proto_fm_proto_rawDescGZIP(), []int{1}
}

func (x *UploadDocResponse) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *UploadDocResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type QueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Question      string                 `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	TopK          int32                  `protobuf:"varint,3,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"` // сколько контекстных чанков вернуть
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_proto_fm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_proto_fm_proto_rawDescGZIP(), []int{2}
}

func (x *QueryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *QueryRequest) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QueryRequest) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

type Chunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Score         float32                `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	mi := &file_proto_fm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_proto_fm_proto_rawDescGZIP(), []int{3}
}

func (x *Chunk) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *Chunk) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Chunk) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type QueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answer        string                 `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`     // (опционально, может быть пустым на MVP)
	Contexts      []*Chunk               `protobuf:"bytes,2,rep,name=contexts,proto3" json:"contexts,omitempty"` // top-k контекстов
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	mi := &file_proto_fm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_proto_fm_proto_rawDescGZIP(), []int{4}
}

func (x *QueryResponse) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QueryResponse) GetContexts() []*Chunk {
	if x != nil {
		return x.Contexts
	}
	return nil
}

var File_proto_fm_proto protoreflect.FileDescriptor

const file_proto_fm_proto_rawDesc = "" +
	"\n" +
	"\x0eproto/fm.proto\x12\x03qna\"\x90\x01\n" +
	"\x10UploadDocRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x12\n" +
	"\x04text\x18\x03 \x01(\tR\x04text\x12\x1d\n" +
	"\n" +
	"file_bytes\x18\x04 \x01(\fR\tfileBytes\x12\x1a\n" +
	"\bfilename\x18\x05 \x01(\tR\bfilename\"B\n" +
	"\x11UploadDocResponse\x12\x15\n" +
	"\x06doc_id\x18\x01 \x01(\tR\x05docId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\"X\n" +
	"\fQueryRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1a\n" +
	"\bquestion\x18\x02 \x01(\tR\bquestion\x12\x13\n" +
	"\x05top_k\x18\x03 \x01(\x05R\x04topK\"L\n" +
	"\x05Chunk\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\x12\x14\n" +
	"\x05score\x18\x03 \x01(\x02R\x05score\"O\n" +
	"\rQueryResponse\x12\x16\n" +
	"\x06answer\x18\x01 \x01(\tR\x06answer\x12&\n" +
	"\bcontexts\x18\x02 \x03(\v2\n" +
	".qna.ChunkR\bcontexts2v\n" +
	"\x03QnA\x12?\n" +
	"\x0eUploadDocument\x12\x15.qna.UploadDocRequest\x1a\x16.qna.UploadDocResponse\x12.\n" +
	"\x05Query\x12\x11.qna.QueryRequest\x1a\x12.qna.QueryResponseB\x0eZ\f/proto;protob\x06proto3"

var (
	file_proto_fm_proto_rawDescOnce sync.Once
	file_proto_fm_proto_rawDescData []byte
)

func file_proto_fm_proto_rawDescGZIP() []byte {
	file_proto_fm_proto_rawDescOnce.Do(func() {
		file_proto_fm_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_fm_proto_rawDesc), len(file_proto_fm_proto_rawDesc)))
	})
	return file_proto_fm_proto_rawDescData
}

var file_proto_fm_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_fm_proto_goTypes = []any{
	(*UploadDocRequest)(nil),  // 0: qna.UploadDocRequest
	(*UploadDocResponse)(nil), // 1: qna.UploadDocResponse
	(*QueryRequest)(nil),      // 2: qna.QueryRequest
	(*Chunk)(nil),             // 3: qna.Chunk
	(*QueryResponse)(nil),     // 4: qna.QueryResponse
}
var file_proto_fm_proto_depIdxs = []int32{
	3, // 0: qna.QueryResponse.contexts:type_name -> qna.Chunk
	0, // 1: qna.QnA.UploadDocument:input_type -> qna.UploadDocRequest
	2, // 2: qna.QnA.Query:input_type -> qna.QueryRequest
	1, // 3: qna.QnA.UploadDocument:output_type -> qna.UploadDocResponse
	4, // 4: qna.QnA.Query:output_type -> qna.QueryResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_fm_proto_init() }
func file_proto_fm_proto_init() {
	if File_proto_fm_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_fm_proto_rawDesc), len(file_proto_fm_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_fm_proto_goTypes,
		DependencyIndexes: file_proto_fm_proto_depIdxs,
		MessageInfos:      file_proto_fm_proto_msgTypes,
	}.Build()
	File_proto_fm_proto = out.File
	file_proto_fm_proto_goTypes = nil
	file_proto_fm_proto_depIdxs = nil
}
